LANGUAGE:Java


NAME:Two or Three Twice
DIFFICULTY:2
SKILL:Array
PROBLEMSTART:1
/* Given an int array, return true if the array contains 2 twice, or 3 twice. 
 * The array will be length 0, 1, or 2.
 */
public boolean double23(int[] nums) {
    int count2 = 0;
    int count3 = 0;
      
    for(int i = 0; i < nums.length; i++) {
        if(nums[i] == 2)
            count2++;
                        
        if(nums[i] == 3)
            count3++;
    }
                                      
    return count2 == 2 || count3 == 2;
PROBLEMEND:1


NAME:Combine First Elements of Array
DIFFICULTY:3
PROBLEMSTART:2
/* Given 2 int arrays, a and b, of any length, return a new array with the 
 * first element of each array. If either array is length 0, ignore that array.
 */
public int[] front11(int[] a, int[] b) {
    if(a.length > 0 && b.length > 0) {
        return new int[] {a[0], b[0]};
    } else if(a.length > 0) {
        return new int[] {a[0]};
    } else if(b.length > 0) {
        return new int[] {b[0]};
    }
                      
    return new int[0];
PROBLEMEND:2


LANGUAGE:Python


DIFFICULTY:1
SKILL:String
PROBLEMSTART:3
def combo_string(a, b):
  """
  Given 2 strings, a and b, return a string of the form short+long+short, 
  with the shorter string on the outside and the longer string on the inside. 
  The strings will not be the same length, but they may be empty (length 0). 
  """
  return a+b+a if len(a)<len(b) else b+a+b
PROBLEMEND:3


LANGUAGE:C++


NAME: Short Long Short
DIFFICULTY:3
SKILL:String
PROBLEMSTART:3
def combo_string(a, b):
  """
  Given 2 strings, a and b, return a string of the form short+long+short, 
  with the shorter string on the outside and the longer string on the inside. 
  The strings will not be the same length, but they may be empty (length 0). 
  """
  return a+b+a if len(a)<len(b) else b+a+b
PROBLEMEND:3

NAME: Cutting Past Middle
DIFFICULTY:2  //I dont know how to determine this
Skill:String
PROBLEMSTART:4 //will there be a standard procedure for numbering code across languages
/* Given one string a, create a new string, which is a copy of a, which stops before 
 * the middle character (for a string of odd length)
 * or the middle two characters (for a string of even length) of a.
 * If a is empty, return the empty string
 */
public string cutMiddle(string a)
{
    if (a.empty())
        return a;
    
    int half_len = (a.length()-1)/2;
    return a.substr(0,half_len);
}
PROBLEMEND:4

NAME: Recursive Equation
SKILL:Recursion
DIFFICULTY:2
PROBLEMSTART:5
/* For a given number n, calculate 2^n * n!
* If the given n is less than 0, return 0
*/
int recursive2NFact(int n)
{
    if (n<0)
    {
        return 0;
    }
    if (n==0)
    {
        return 1;
    }
    return 2*n*recursive2NFact(n-1);
}
PROBLEMEND:5

NAME: Number Wrapper Class //this one might not be that great, but i think a memory management question would be nice
SKILL:Memory
DIFFICULTY:2
PROBLEMSTART:6
/* Create the default constructor, constructor, and destructor
* for the wrapper class containing pointers to one integer and one double,
* given that the variables are defined as int* i and double* d
*/
Wrapper()
{
    i = new int(0);
    d = new double(0.0);
}
Wrapper(int n1, double n2)
{
    i = new int(n1);
    d = new double(n2);
}
~Wrapper()
{
    delete i;
    delete d;
}
PROBLEMEND:6

NAME: Array Traversal of Various Step Sizes
SKILL:Input,Exceptions
DIFFICULTY:3
PROBLEMSTART:7
/*Assume array a[] has already been initialized and filled with strings, with variable arraysize equal to its length,
* and the function traverseInStep() has been declared.
* Ask for an integer n > 0, and then put that input into a function, which will
* print out every value a[i] such that i is a multiple of n.
* If not given an integer, or the integer is nonpositive, loop the prompt until an integer is given.
*/
bool noIntProvided = true;
int n;
while (noIntProvided)
{
        cout<<"Please provide an integer\n";
        cin>>n;
    if (n < 1)
    {
        cout<<"Integer is below 1, not valid\n";
    }
    else
    {
        noIntProvided = false;
    }
}
traverseInStep(n,a);

void traverseInStep(int n, string array[], int arraysize)
{
    for (int i = 0; i < arraysize; i+=n)
    {
        cout<<array[i]<<endl;
    }
}
PROBLEMEND:7